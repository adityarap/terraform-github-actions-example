name: Terraformnewflow

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  call-workflow:
    uses: ./.github/workflows/calledflow.yml
    secrets:
      token: ${{ secrets.TOKEN }}

  terraform-actions:
    name: Workflow
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repository
      uses: actions/checkout@master

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: AKIA47Z3462Q7VKPD66S
        aws-secret-access-key: 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
        aws-region: us-west-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.6

    - name: Terraform Fmt
      id: fmt
      run: terraform fmt -check -diff
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: true
    

    - name: Run email code
      uses: actions/setup-python@v3
      with:
        python-version: 3.x

    
    - name: execute py script # run the run.py to get the latest data
      env:
        SMTP_USERNAME: ${{ secrets.USERNAME }}
        SMTP_PASSWORD: ${{ secrets.PASSWORD }}
#         JOB: ${{github.job}}
#         REPO: ${{github.repository}}
#         STATUS: ${{job.status}}
      run: |
        python send_email.py
      
#     - name : email  
#       uses: cinotify/github-action@main    /ok
#       with:
#         to: 'prudhvinaagch@gmail.com'
#         subject:  ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }} #'building main'
#         body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} #'This is a notification from GitHub actions.'
        
#     - name: Send custom JSON data to Slack workflow
#       id: slack
#       uses: slackapi/slack-github-action@v1.23.0
#       with:
#         # For posting a rich message using Block Kit
#         payload: |
#           {
#             "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
#             "blocks": [
#               {
#                 "type": "section",
#                 "text": {
#                   "type": "mrkdwn",
#                   "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
#                 }
#               }
#             ]
#           }
#       env:
#         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#         SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      
#     - name: Send mail
#       uses: cybervoid//action-send-email-nodemailer@v1.0
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       with:
#         to: aditya.raparthi13@gmail.com
#         from: '"John Smith <mmgopal92@gmail.com>"'    #added
#         subject: 'This is my subject'
#         body: Sample email from ${{github.repository}}. Hello World!
#     - name: Was the email sent
#       run: echo "Was the email sent? ${{ steps.message.outputs.message }}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

    - name: Comment on PR
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        format_out: ${{ steps.fmt.outputs.stdout }}
        format_err: ${{ steps.fmt.outputs.stderr }}
        init_out: ${{ steps.init.outputs.stdout }}
        init_err: ${{ steps.init.outputs.stderr }}
        validate_out: ${{ steps.validate.outputs.stdout }}
        validate_err: ${{ steps.validate.outputs.stderr }}
        plan: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const CODE_BLOCK = '```';
          const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';

          const output = `
          ### ${ fmt_result } Terraform Format and Style üé®
          <details><summary>Logs</summary>
          Output

          ${ CODE_BLOCK }diff
          ${ process.env.format_out }
          ${ CODE_BLOCK }

          Errors

          ${ CODE_BLOCK }
          ${ process.env.format_err }
          ${ CODE_BLOCK }
          </details> <!-- End Format Logs -->

          ### ${ init_result } Terraform Initialization ‚öôÔ∏è
          <details><summary>Logs</summary>
          Output

          ${ CODE_BLOCK }
          ${ process.env.init_out }
          ${ CODE_BLOCK }

          Errors

          ${ CODE_BLOCK }
          ${ process.env.init_err }
          ${ CODE_BLOCK }
          </details> <!-- End Init Logs -->

          ### ${ validate_result } Terraform Validation ü§ñ
          <details><summary>Logs</summary>
          Output

          ${ CODE_BLOCK }
          ${ process.env.validate_out }
          ${ CODE_BLOCK }

          Errors

          ${ CODE_BLOCK }
          ${ process.env.validate_err }
          ${ CODE_BLOCK }
          </details> <!-- End Validate Logs -->

          ### ${ plan_result } Terraform Plan üìñ
          <details><summary>Logs</summary>

          ${ CODE_BLOCK }terraform
          ${ process.env.plan }
          ${ CODE_BLOCK }
          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: 'End results'
      shell: bash
      run: |
        echo fmt
        test ${{ steps.fmt.outputs.exitcode }} -eq 0
        echo init
        test ${{ steps.init.outputs.exitcode }} -eq 0
        echo validate
        test ${{ steps.validate.outputs.exitcode }} -eq 
        

        
      
#     - name: Send mail
#       if: always()
#       uses: dawidd6/action-send-mail@v2
#       with:
#           # mail server settings
#         server_address: smtp.gmail.com
#         server_port: 465
#           # user credentials
#           # Optional (recommended) mail server username:
#         username: adhi.rap93@gmail.com
#           # Optional (recommended) mail server password:
#         password: kmryllfhskjqmgsm
#           # email subject
#         subject: job status
#           # email body as text
#         body: response
#           # comma-separated string, send email to
#         to: aditya.raparthi13@gmail.com
#           # from email name
#         from: Aditya #from
        

